{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/types/lists","result":{"data":{"mdx":{"id":"8522e275-05e8-5730-9626-7e18278f6d1c","excerpt":"Use the  t.list  type factory to take an existing type and derive a list from it.","fields":{"slug":"/types/lists/"},"frontmatter":{"title":"Lists","description":"Learn how to create docs using Rocket Docs.","image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Lists\",\n  \"description\": \"Learn how to create docs using Rocket Docs.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t.list\"), \" type factory to take an existing type and derive a list from it.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// Creating a custom object type to be used inside a list in another type:\\nconst Animal = t.object({\\n  name: 'Animal',\\n  fields: {\\n    id: t.id,\\n    name: t.string.nullable,\\n    age: t.int,\\n    species: t.string,\\n  },\\n});\\n\\n// Now, we'll use the Animal type within a list:\\nconst Person = t.object({\\n  name: 'User',\\n  fields: {\\n    id: t.id,\\n    favoriteFoods: t.list(t.string),\\n    pets: t.list(Animal),\\n  },\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"/** TypeScript */\\ntype Person = {\\n  id: string | number;\\n  favoriteFoods: Array<string>;\\n  pets: Array<{\\n    id: string | number;\\n    name: string | null | undefined;\\n    age: Int;\\n    species: string;\\n  }>;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"# GraphQL:\\n\\ntype Person {\\n  id: ID!\\n  favoriteFoods: [String!]!\\n  pets: [Animal!]!\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[]}},"pageContext":{"slug":"/types/lists/","prev":{"label":"Input Objects","link":"/types/input-objects"},"next":{"label":"Interfaces","link":"/types/interfaces"},"githubEditUrl":"https://github.com/whats-good/uniform-graphql/tree/master/packages/website/src/docs/types/lists.mdx"}},"staticQueryHashes":["1954253342","2328931024","2501019404","973074209"]}