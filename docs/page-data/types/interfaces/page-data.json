{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/types/interfaces","result":{"data":{"mdx":{"id":"7ec62ce6-223a-5c7c-9873-b08949cb5a48","excerpt":"Use the  t.interface  type factory to create interface types.","fields":{"slug":"/types/interfaces/"},"frontmatter":{"title":"","description":null,"image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t.interface\"), \" type factory to create interface types.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"const Dog = t.object({\\n  name: 'Dog',\\n  fields: {\\n    species: t.string,\\n    isLoyal: t.boolean,\\n  },\\n});\\n\\nconst Cat = t.object({\\n  name: 'Cat',\\n  fields: {\\n    species: t.string,\\n    isDomesticated: t.boolean,\\n  },\\n});\\n\\nconst Pet = t.interface({\\n  name: 'Pet',\\n  fields: {\\n    species: t.string,\\n  },\\n\\n  /**\\n   * the library makes sure that object types\\n   * passed here correctly implement the interface.\\n  */\\n  implementors: [Dog, Cat],\\n  resolveType: () => {\\n    /**\\n     * All abstract types need a resolveType function that will\\n     * figure out the type name of a resolved object so that\\n     * GraphQL can understand which Object type this returned\\n     * piece of data falls under.\\n    */\\n    if (/** some condition */) {\\n      return 'Dog' as const;\\n    } else {\\n      return 'Cat' as const;\\n    }\\n  }\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"/** TypeScript */\\ntype Pet = {\\n  species: string;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"# GraphQL\\n\\ninterface Pet {\\n  species: String!\\n}\\n\\ntype Dog implements Pet {\\n  species: String!\\n  isLoyal: Boolean!\\n}\\n\\ntype Cat implements Pet {\\n  species: String!\\n  isDomesticated: Boolean!\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[]}},"pageContext":{"slug":"/types/interfaces/","next":{"label":"Introduction","link":"/"},"githubEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/master/examples/gatsby-theme-docs/src/docs/types/interfaces.mdx"}},"staticQueryHashes":["1954253342","2328931024","2501019404","973074209"]}