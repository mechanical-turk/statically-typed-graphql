{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/types/unions","result":{"data":{"mdx":{"id":"ea546dd7-23eb-5ceb-afbf-57ad4d7fa25d","excerpt":"Use the  t.union  type factory to combine multiple object types into a union.","fields":{"slug":"/types/unions/"},"frontmatter":{"title":"","description":null,"image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t.union\"), \" type factory to combine multiple object types into a union.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"const Animal = t.object({\\n  name: 'Animal',\\n  fields: {\\n    id: t.id,\\n    name: t.string,\\n    species: t.string,\\n  },\\n});\\n\\nconst Person = t.object({\\n  name: 'Person',\\n  fields: {\\n    id: t.id,\\n    fullName: t.string,\\n  },\\n});\\n\\nconst BestFriend = t.union({\\n  name: 'BestFriend',\\n  types: [Animal, Person],\\n  resolveType: (x) => {\\n    /**\\n     * All abstract types need a resolveType function that will\\n     * figure out the type name of a resolved object so that\\n     * GraphQL can understand which Object type this returned\\n     * piece of data falls under.\\n    */\\n\\n    if (/** some condition */) {\\n      return 'Person' as const;\\n    } else {\\n      return 'Animal' as const;\\n    }\\n  },\\n});\\n\\nconst User = t.object({\\n  name: 'User',\\n  fields: {\\n    id: t.id,\\n    email: t.string,\\n    bestFriend: BestFriend,\\n  }\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"/** TypeScript */\\ntype User = {\\n  id: string | number;\\n  email: string;\\n  bestFriend:\\n    | {\\n        id: string | number;\\n        name: string;\\n        species: string;\\n      }\\n    | {\\n        id: string | number;\\n        fullName: string;\\n      };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"# GraphQL\\n\\ntype Animal {\\n  id: ID!\\n  name: String!\\n  species: String!\\n}\\n\\ntype Person {\\n  id: ID!\\n  fullName: String!\\n}\\n\\nunion BestFriend = Animal | Person\\n\\ntype User {\\n  id: ID!\\n  email: String!\\n  bestFriend: BestFriend!\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[]}},"pageContext":{"slug":"/types/unions/","prev":{"label":"Interfaces","link":"/types/interfaces"},"next":{"label":"Nullability","link":"/further-reading/nullability"},"githubEditUrl":"https://github.com/whats-good/uniform-graphql/tree/master/packages/website/src/docs/types/unions.mdx"}},"staticQueryHashes":["1954253342","2328931024","2501019404","973074209"]}