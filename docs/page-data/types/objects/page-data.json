{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/types/objects","result":{"data":{"mdx":{"id":"104811c3-fba8-5912-93d9-e5964c435616","excerpt":"So far we have only dealt with neutral and self-contained types. However, the true power of GraphQL comes from how it lets us compose simpler types to createâ€¦","fields":{"slug":"/types/objects/"},"frontmatter":{"title":"Objects","description":"Learn how to create docs using Rocket Docs.","image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Objects\",\n  \"description\": \"Learn how to create docs using Rocket Docs.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"So far we have only dealt with neutral and self-contained types. However, the true power of GraphQL comes from how it lets us compose simpler types to create more complex types. Let's begin with our first \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"output\"), \" type factory: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t.object\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// Copying the Membership example from above for convenience\\nconst Membership = t.enum({\\n  name: 'Membership',\\n  values: {\\n    free: null,\\n    paid: null,\\n    enterprise: null,\\n  },\\n});\\n\\nconst User = t.object({\\n  name: 'User',\\n  fields: {\\n    id: t.id,\\n    email: t.string.nullable,\\n    membership: Membership,\\n  },\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"/** TypeScript */\\n\\ntype User = {\\n  id: string | number;\\n  email: string | undefined | null;\\n  membership: 'free' | 'paid' | 'enterprise';\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"# GraphQL\\n\\ntype User {\\n  id: ID!\\n  email: String\\n  membership: Membership!\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[]}},"pageContext":{"slug":"/types/objects/","prev":{"label":"Enums","link":"/types/enums"},"next":{"label":"Input Objects","link":"/types/input-objects"},"githubEditUrl":"https://github.com/whats-good/uniform-graphql/tree/master/packages/website/src/docs/types/objects.mdx"}},"staticQueryHashes":["1954253342","2328931024","2501019404","973074209"]}